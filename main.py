import telebot
from pandas import DataFrame
from tinkoff.invest import Client
from telebot import types
import threading
import time
from io import StringIO
import sqlite3
import csv
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv("API_TOKEN"))

DB_NAME = "database.sqlite"
with sqlite3.connect(DB_NAME) as db:
    db.execute('''CREATE TABLE IF NOT EXISTS portfolios (
        user_id INTEGER,
        ticker TEXT,
        PRIMARY KEY (user_id, ticker)
    )''')

ticker = ""
USER_ALERTS = {}
USER_PORTFOLIOS = {}
POPULAR_TICKERS = ["sber", "gazp", "smlt", "ydex", "nvtk", "ozon", "lkoh", "rosn", "tsla",
                   "aapl", "goog", "msft", "nvda", "amzn", "meta"]
USER_DB = {}
TEMPORARY_DATA = {}

MARKUP_MAIN = types.ReplyKeyboardMarkup(resize_keyboard=True)
BTN1, BTN2 = types.KeyboardButton("/find_price"), types.KeyboardButton("/export")
BTN3, BTN4, BTN5 = types.KeyboardButton("/portfolio"), types.KeyboardButton("/alerts"), types.KeyboardButton("/help")
MARKUP_MAIN.row(BTN1, BTN2)
MARKUP_MAIN.row(BTN3, BTN4)
MARKUP_MAIN.row(BTN5)


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id

    if user_id in USER_DB:
        show_main_menu(user_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        btn2 = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        markup.add(btn1)
        markup.add(btn2)

        bot.send_message(user_id,
                         f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                         "ü§ñ –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ü–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def register_start(message):
    user_id = message.chat.id
    TEMPORARY_DATA[user_id] = {"step": "waiting_password"}

    bot.send_message(user_id,
                     "üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, register_finish)


def register_finish(message):
    user_id = message.chat.id
    password = message.text.strip()
    if len(password) < 4:
        bot.send_message(user_id, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞.")
        return
    if user_id in USER_DB:
        bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    USER_DB[user_id] = {
        "password": password,
        "portfolio": [],
        "alerts": {}
    }

    show_main_menu(user_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@bot.message_handler(func=lambda message: message.text.lower() == "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
def login_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn)

    user_id = message.chat.id
    if user_id not in USER_DB:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=markup)
        return

    TEMPORARY_DATA[user_id] = {"step": "waiting_password"}

    bot.send_message(user_id, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())

    bot.register_next_step_handler(message, login_finish)


def login_finish(message):
    user_id = message.chat.id
    password = message.text.strip()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    markup.add(btn)

    if USER_DB[user_id]["password"] != password:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)
        login_start(message)
        return

    show_main_menu(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")


def show_main_menu(user_id, welcome_message=""):
    bot.send_message(user_id,
                     f"{welcome_message}\n\n"
                     "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π /help",
                     reply_markup=MARKUP_MAIN)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, 'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                      '/find_price - –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É\n'
                                      '/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n'
                                      '/portfolio - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏–π –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n'
                                      '/alerts - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω\n\n'
                                      '–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
                                      '1. –í–≤–µ–¥–∏ /find_price\n'
                                      '2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER)\n'
                                      '3. –ü–æ–ª—É—á–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–∏')


@bot.message_handler(commands=['find_price'])
def find_price(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [types.KeyboardButton(ticker) for ticker in POPULAR_TICKERS]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    bot.send_message(message.chat.id, 'üìà –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=markup)
    bot.register_next_step_handler(message, process_ticker)


def process_ticker(message):
    global ticker
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=MARKUP_MAIN)
        return
    ticker = message.text.strip().lower()

    try:
        with Client(os.getenv("API_TOKEN_INVEST")) as cl:
            instruments = cl.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker', 'currency', 'sector']
            )
            stock_info = r[r['ticker'] == ticker.upper()].iloc[0]
            price_a = run(ticker, message).rstrip(''')( /.,''')
            info_msg = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏–∏:\n\n" \
                       f"–ö–æ–º–ø–∞–Ω–∏—è: {stock_info['name']}\n" \
                       f"–¢–∏–∫–µ—Ä: {stock_info['ticker']}\n" \
                       f"–í–∞–ª—é—Ç–∞: {stock_info['currency']}\n" \
                       f"–°–µ–∫—Ç–æ—Ä: {stock_info['sector']}\n" \
                       f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {ticker.upper()}: {price_a} {stock_info['currency']}\n"

            info_msg += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: https://www.tbank.ru/invest/stocks/{stock_info['ticker']}/"

            bot.send_message(message.chat.id, info_msg, reply_markup=MARKUP_MAIN)
            run(ticker, message)

    except Exception:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                         reply_markup=MARKUP_MAIN)


def run(TICKER, message):
    try:
        with Client(os.getenv("API_TOKEN_INVEST")) as client:
            instruments = client.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker']
            )
            figi = r[r['ticker'] == TICKER.upper()]['figi'].iloc[0]
            return main(figi, message, TICKER)
    except Exception:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ –∞–∫—Ü–∏–∏.')


def main(figi, message, TICKER):
    try:
        with Client(os.getenv("API_TOKEN_INVEST")) as client:
            k = client.market_data.get_last_prices(figi=[str(figi)])
            massive = list(str(k).split(','))
            tmp1 = "".join(massive[1]).split("=")
            tmp2 = "".join(massive[2]).split("=")
            price = f'{tmp1[2]}.{(tmp2[1])[:2]}'

            return price
    except Exception:
        bot.send_message(message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@bot.message_handler(commands=['export'])
def export_menu(message):
    user_id = message.chat.id

    conn = sqlite3.connect('database.sqlite')
    cursor = conn.cursor()

    cursor.execute("SELECT ticker FROM portfolios WHERE user_id=?", (user_id,))
    portfolio = cursor.fetchall()
    print(portfolio)
    conn.close()

    if not portfolio:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton("üìù TXT")
    btn2 = types.KeyboardButton("üìä CSV")
    btn3 = types.KeyboardButton("üóÉÔ∏è SQL")
    btn4 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(btn1, btn2, btn3)
    markup.add(btn4)

    bot.send_message(
        user_id,
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:",
        reply_markup=markup
    )


def get_portfolio_data(user_id, message):
    conn = sqlite3.connect('database.sqlite')
    cursor = conn.cursor()

    cursor.execute("SELECT ticker FROM portfolios WHERE user_id=?", (user_id,))
    tcrk = [i[0] for i in cursor.fetchall()]
    conn.close()

    portfolio = []
    for i in tcrk:
        temp = []
        with Client(os.getenv("API_TOKEN_INVEST")) as cl:
            instruments = cl.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker', 'currency', 'sector']
            )
            stock_info = r[r['ticker'] == i.upper()].iloc[0]
            price_a = run(i, message).rstrip(''')( /.,''')
            temp.append(stock_info['ticker'])
            temp.append(stock_info['name'])
            temp.append(price_a)
            temp.append(stock_info['currency'])
            temp.append(stock_info['sector'])
        portfolio.append(temp)

    return portfolio


@bot.message_handler(func=lambda m: m.text.lower() in ["üìù txt", "txt"])
def export_txt(message):
    user_id = message.chat.id
    portfolio = get_portfolio_data(user_id, message)

    if not portfolio:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    txt_content = f"–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
    txt_content += "{:<10} {:<30} {:<15} {:<10} {:<20}\n".format(
        "–¢–∏–∫–µ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–í–∞–ª—é—Ç–∞", "–°–µ–∫—Ç–æ—Ä"
    )
    txt_content += "-" * 85 + "\n"

    for item in portfolio:
        ticker, name, price, currency, sector = item
        txt_content += "{:<10} {:<30} {:<15} {:<10} {:<20}\n".format(
            ticker, name or "N/A", str(price) or "N/A", currency or "N/A", sector or "N/A"
        )

    bot.send_document(
        user_id,
        ("portfolio.txt", txt_content.encode('utf-16')),
        caption="üìù –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT",
        reply_markup=MARKUP_MAIN
    )


@bot.message_handler(func=lambda m: m.text.lower() in ["üìä csv", "csv"])
def export_csv(message):
    user_id = message.chat.id
    portfolio = get_portfolio_data(user_id, message)

    if not portfolio:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    csv_file = StringIO()
    writer = csv.writer(csv_file)

    writer.writerow(["–¢–∏–∫–µ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–í–∞–ª—é—Ç–∞", "–°–µ–∫—Ç–æ—Ä", "–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"])

    for item in portfolio:
        ticker, name, price, currency, sector = item
        writer.writerow([
            ticker,
            name or "N/A",
            price or "N/A",
            currency or "N/A",
            sector or "N/A",
            datetime.now().strftime('%Y-%m-%d %H:%M')
        ])

    csv_file.seek(0)
    bot.send_document(
        user_id,
        ("portfolio.csv", csv_file.getvalue().encode('utf-16')),
        caption="üìä –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV",
        reply_markup=MARKUP_MAIN
    )


@bot.message_handler(func=lambda m: m.text.lower() in ["üóÉÔ∏è sql", " sql"])
def export_sql(message):
    user_id = message.chat.id
    portfolio = get_portfolio_data(user_id, message)

    if not portfolio:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    sql_content = f"-- –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
    sql_content += f"-- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
    sql_content += "CREATE TABLE IF NOT EXISTS exported_portfolio (\n"
    sql_content += "    ticker TEXT PRIMARY KEY,\n"
    sql_content += "    name TEXT,\n"
    sql_content += "    price REAL,\n"
    sql_content += "    currency TEXT,\n"
    sql_content += "    sector TEXT,\n"
    sql_content += "    export_date TEXT\n);\n\n"

    for item in portfolio:
        ticker, name, price, currency, sector = item
        sql_content += (
            f"""INSERT INTO exported_portfolio (ticker, name, price, currency, sector, export_date) """
            f"""VALUES ('{ticker}', {f"'{name}'" if name else 'NULL'}, """
            f"""{price if price else 'NULL'}, {f"'{currency}'" if currency else 'NULL'}, """
            f"""{f"'{sector}'" if sector else 'NULL'}, """
            f"""'{datetime.now().strftime('%Y-%m-%d %H:%M')}');\n"""
        )

    bot.send_document(
        user_id,
        ("portfolio.sql", sql_content.encode('utf-16')),
        caption="üóÉÔ∏è –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ SQL",
        reply_markup=MARKUP_MAIN
    )


@bot.message_handler(commands=['portfolio'])
def portfolio(message):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
    btn2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é")
    btn3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é")
    markup.row(btn1, btn2)
    markup.row(btn3)
    bot.send_message(user_id, f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º", reply_markup=markup)

    bot.register_next_step_handler(message, process_portfolio)


def process_portfolio(message):
    user_id = message.chat.id
    text = message.text.lower()

    if text == "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        buttons = [types.KeyboardButton(tick) for tick in POPULAR_TICKERS]
        markup.add(*buttons)
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å:", reply_markup=markup)
        bot.register_next_step_handler(message, add_to_portfolio)
    elif text == "—É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é":
        show_portfolio_for_deletion(user_id, message)
    elif text == "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å":
        show_full_portfolio(user_id)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                         reply_markup=MARKUP_MAIN)


def add_to_portfolio(message):
    user_id = message.chat.id
    ticker = message.text.strip().upper()

    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MARKUP_MAIN)
        return

    try:
        with Client(os.getenv("API_TOKEN_INVEST")) as cl:
            instruments = cl.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker']
            )

            if ticker not in r['ticker'].values:
                bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–π —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=MARKUP_MAIN)
                return

            if user_id not in USER_PORTFOLIOS:
                USER_PORTFOLIOS[user_id] = []

            if ticker not in USER_PORTFOLIOS[user_id]:
                USER_PORTFOLIOS[user_id].append(ticker)
                bot.send_message(user_id, f"‚úÖ –ê–∫—Ü–∏—è {ticker} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å", reply_markup=MARKUP_MAIN)
                add_to_portfolio_db(user_id, ticker)
            else:
                bot.send_message(user_id, f"‚ÑπÔ∏è –ê–∫—Ü–∏—è {ticker} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ", reply_markup=MARKUP_MAIN)

    except Exception:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MARKUP_MAIN)


def add_to_portfolio_db(user_id, ticker):
    conn = None
    try:
        conn = sqlite3.connect('database.sqlite')
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO portfolios (user_id, ticker)
            VALUES (?, ?)
        """, (user_id, ticker))

        conn.commit()
    except sqlite3.Error as e:
        print(f"Database error: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()


def show_portfolio_for_deletion(user_id, message):
    if user_id not in USER_PORTFOLIOS or not USER_PORTFOLIOS[user_id]:
        bot.send_message(user_id, "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3, one_time_keyboard=True)
    buttons = [types.KeyboardButton(tick) for tick in USER_PORTFOLIOS[user_id]]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    bot.send_message(user_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    bot.register_next_step_handler(message, process_ticker_selection, user_id)


def show_full_portfolio(user_id):
    if user_id not in USER_PORTFOLIOS or not USER_PORTFOLIOS[user_id]:
        bot.send_message(user_id, "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.", reply_markup=MARKUP_MAIN)
        return

    portfolio_msg = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
    total_value = 0

    with Client(os.getenv("API_TOKEN_INVEST")) as client:
        for ticker in USER_PORTFOLIOS[user_id]:
            try:
                instruments = client.instruments
                r = DataFrame(
                    instruments.shares().instruments,
                    columns=['name', 'figi', 'ticker']
                )
                figi = r[r['ticker'] == ticker]['figi'].iloc[0]

                k = client.market_data.get_last_prices(figi=[str(figi)])
                massive = list(str(k).split(','))
                tmp1 = "".join(massive[1]).split("=")
                tmp2 = "".join(massive[2]).split("=")
                price = float(f'{tmp1[2]}.{(tmp2[1])[:2]}'.rstrip(''')( /.,'''))
                total_value += price

                portfolio_msg += f"{ticker}: {price} —Ä—É–±.\n"

            except Exception:
                portfolio_msg += f"{ticker}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.\n"

    portfolio_msg += f"\nüí∞–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(total_value, 2)} —Ä—É–±."
    bot.send_message(user_id, portfolio_msg, reply_markup=MARKUP_MAIN)


def process_ticker_selection(message, user_id):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MARKUP_MAIN)
        return

    selected_ticker = message.text
    if selected_ticker in USER_PORTFOLIOS.get(user_id, []):
        USER_PORTFOLIOS[user_id].remove(selected_ticker)
        bot.send_message(user_id, f"‚úÖ –ê–∫—Ü–∏—è {selected_ticker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.", reply_markup=MARKUP_MAIN)
        delete_from_portfolio(user_id, ticker)
    else:
        bot.send_message(user_id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ.", reply_markup=MARKUP_MAIN)


def delete_from_portfolio(user_id, ticker):
    conn = None
    try:
        conn = sqlite3.connect('database.sqlite')
        cursor = conn.cursor()
        cursor.execute("""
            DELETE FROM portfolios 
            WHERE user_id = ? AND ticker = ?
        """, (user_id, ticker))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()


@bot.message_handler(commands=['alerts'])
def alerts(message):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = types.KeyboardButton("–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    btn2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    btn3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    markup.row(btn1, btn2)
    markup.row(btn3)

    bot.send_message(user_id, "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=markup)

    bot.register_next_step_handler(message, process_alerts)


def process_alerts(message):
    user_id = message.chat.id
    text = message.text.lower()

    if text == "–¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        buttons = [types.KeyboardButton(tick) for tick in POPULAR_TICKERS]
        markup.add(*buttons)
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, add_alert_step1)
    elif text == "—É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
        show_alerts_for_deletion(user_id)
    elif text == "–º–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        show_user_alerts(user_id)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                         reply_markup=MARKUP_MAIN)


def add_alert_step1(message):
    user_id = message.chat.id
    ticker = message.text.strip().upper()

    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MARKUP_MAIN)
        return

    try:
        with Client(os.getenv("API_TOKEN_INVEST")) as cl:
            instruments = cl.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker']
            )

            if ticker not in r['ticker'].values:
                bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=MARKUP_MAIN)
                return

            bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –¥–ª—è 5%):",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, add_alert_step2, ticker)

    except Exception:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MARKUP_MAIN)


def add_alert_step2(message, ticker):
    user_id = message.chat.id
    try:
        percent = float(message.text)

        if user_id not in USER_ALERTS:
            USER_ALERTS[user_id] = {}

        USER_ALERTS[user_id][ticker] = percent

        with Client(os.getenv("API_TOKEN_INVEST")) as client:
            instruments = client.instruments
            r = DataFrame(
                instruments.shares().instruments,
                columns=['name', 'figi', 'ticker']
            )
            figi = r[r['ticker'] == ticker]['figi'].iloc[0]
            k = client.market_data.get_last_prices(figi=[str(figi)])
            massive = list(str(k).split(','))
            tmp1 = "".join(massive[1]).split("=")
            tmp2 = "".join(massive[2]).split("=")
            current_price = float(f'{tmp1[2]}.{(tmp2[1])[:2]}'.rstrip(''')( /.,'''))
            USER_ALERTS[user_id][f"{ticker}_price"] = current_price
        bot.send_message(user_id, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticker} –Ω–∞ {percent}% —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                         reply_markup=MARKUP_MAIN)

    except Exception:
        bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å.", reply_markup=MARKUP_MAIN)


def show_user_alerts(user_id):
    if user_id not in USER_ALERTS or not USER_ALERTS[user_id]:
        bot.send_message(user_id, "üîî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=MARKUP_MAIN)
        return

    alerts_msg = "üîî –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
    for ticker in [k for k in USER_ALERTS[user_id].keys() if not k.endswith("_price")]:
        alerts_msg += f"{ticker}: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ {USER_ALERTS[user_id][ticker]}%\n"

    bot.send_message(user_id, alerts_msg, reply_markup=MARKUP_MAIN)


def show_alerts_for_deletion(user_id):
    if user_id not in USER_ALERTS or not USER_ALERTS[user_id]:
        bot.send_message(user_id, "üîî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=MARKUP_MAIN)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3, one_time_keyboard=True)
    tickers = [k for k in USER_ALERTS[user_id].keys() if not k.endswith("_price")]

    if not tickers:
        bot.send_message(user_id, "üîî –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MARKUP_MAIN)
        return

    buttons = [types.KeyboardButton(tick) for tick in tickers]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    msg = bot.send_message(user_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_alert_deletion, user_id)


def process_alert_deletion(message, user_id):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MARKUP_MAIN)
        return

    ticker = message.text.upper()
    if ticker in USER_ALERTS.get(user_id, {}):
        del USER_ALERTS[user_id][ticker]
        if f"{ticker}_price" in USER_ALERTS[user_id]:
            del USER_ALERTS[user_id][f"{ticker}_price"]
        bot.send_message(user_id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=MARKUP_MAIN)
    else:
        bot.send_message(user_id, f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=MARKUP_MAIN)


def check_price_changes():
    while True:
        try:
            for user_id in list(USER_ALERTS.keys()):
                if not USER_ALERTS[user_id]:
                    continue
                with Client(os.getenv("API_TOKEN_INVEST")) as client:
                    instruments = client.instruments
                    r = DataFrame(
                        instruments.shares().instruments,
                        columns=['name', 'figi', 'ticker']
                    )
                    alerts_to_check = [k for k in USER_ALERTS[user_id].keys() if not k.endswith("_price")]
                    for ticker in alerts_to_check:
                        try:
                            figi = r[r['ticker'] == ticker]['figi'].iloc[0]
                            k = client.market_data.get_last_prices(figi=[str(figi)])
                            massive = list(str(k).split(','))
                            tmp1 = "".join(massive[1]).split("=")
                            tmp2 = "".join(massive[2]).split("=")
                            current_price = float(f'{tmp1[2]}.{(tmp2[1])[:2]}'.rstrip(''')( /.,'''))

                            old_price = USER_ALERTS[user_id].get(f"{ticker}_price", current_price)
                            percent_change = abs((current_price - old_price) / old_price * 100)
                            alert_percent = USER_ALERTS[user_id][ticker]

                            if percent_change >= alert_percent:
                                direction = "–≤—ã—Ä–æ—Å–ª–∞" if current_price > old_price else "—É–ø–∞–ª–∞"
                                bot.send_message(
                                    user_id,
                                    f"üö® {ticker}: —Ü–µ–Ω–∞ {direction} –Ω–∞ {round(percent_change, 2)}%!\n"
                                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}\n"
                                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}"
                                )
                                USER_ALERTS[user_id][f"{ticker}_price"] = current_price

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {ticker} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                            continue
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_price_changes: {str(e)}")

        time.sleep(300)


@bot.message_handler(func=lambda message: True)
def empty(message):
    bot.send_message(message.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏', reply_markup=MARKUP_MAIN)


threading.Thread(target=check_price_changes, daemon=True).start()
bot.polling(none_stop=True)
